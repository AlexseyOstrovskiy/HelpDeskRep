{"version":3,"sources":["Input.js","Form.js","index.js"],"names":["Input","props","state","value","className","error","this","handleError","opts","onChange","inputChange","Component","Form","field","errmsg","setState","prevState","failure","errcount","errmsgs","renderError","Object","values","find","v","handleSubmit","event","preventDefault","data","FormData","form","fetch","action","method","body","URLSearchParams","then","redirected","window","location","url","catch","e","console","warn","inputs","map","index","name","placeholder","type","key","errors","onSubmit","ref","fm","params","search","ReactDOM","render","get","document","getElementById"],"mappings":"oQAkCeA,E,YA9BX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACTC,MAAOF,EAAME,MAAOF,EAAME,MAAQ,GAClCC,UAAWH,EAAMG,UAAWH,EAAMG,UAAY,GAC9CC,OAAO,GALG,E,sEAWP,IAAD,EACyBC,KAAKL,MAA7BM,EADD,EACCA,YAAgBC,EADjB,+BAGN,OADAF,KAAKC,YAAcA,EAEjB,2CAAWC,EAAX,CAAiBL,MAAOG,KAAKJ,MAAMC,MACjCM,SAAUH,KAAKI,YAAaN,UAAWE,KAAKJ,MAAME,iB,GAjB1CO,a,ujBCiFLC,E,YA9EX,WAAYX,GAAQ,IAAD,8BACX,4CAAMA,KAWVM,YAAc,SAACM,EAAOC,GACdD,IAEDC,EACC,EAAKC,SAAS,SAACC,GAAD,MAAgB,CAC1BC,QAAS,GACTC,SAAUF,EAAUE,SAAW,EAC/BC,QAAQ,EAAD,GAAMH,EAAUG,QAAhB,eAA0BN,EAAQC,OAG7C,EAAKC,SAAS,SAACC,GAAD,MAAgB,CAC1BC,QAAS,GACTC,SAA+B,IAArBF,EAAUE,SAAc,EAAIF,EAAUE,SAAS,EACzDC,QAAQ,EAAD,GAAMH,EAAUG,QAAhB,eAA0BN,EAAQ,UAzBtC,EA8BfO,YAAc,WACV,GAAG,EAAKlB,MAAMgB,UAAY,EAAKhB,MAAMe,QAAS,CAC1C,IAAMH,EAAS,EAAKZ,MAAMe,SACrBI,OAAOC,OAAO,EAAKpB,MAAMiB,SAASI,KAAK,SAAAC,GAAC,OAAEA,IAC/C,OAAO,yBAAKpB,UAAU,SAASU,KAlCxB,EAsDnBW,aAAe,SAACC,GAER,GADAA,EAAMC,kBACF,EAAKzB,MAAMgB,SAAU,CACrB,IAAMU,EAAO,IAAIC,SAAS,EAAKC,MAC/BC,MAAM,EAAKD,KAAKE,OAAQ,CACtBC,OAAQ,EAAKH,KAAKG,OAClBC,KAAM,IAAIC,gBAAgBP,KAE3BQ,KAAK,SAAAZ,GACCA,EAAEa,aAAYC,OAAOC,SAAWf,EAAEgB,OAExCC,MAAM,SAAAC,GAAC,OAAIC,QAAQC,KAAKF,OA/D1BzC,EAAMI,MACL,EAAKH,MAAQ,CACXe,QAAS,8BACTC,SAAU,GAGZ,EAAKhB,MAAQ,CAAEgB,SAAU,GARlB,E,sEAsCT,IAAD,OACC2B,EAASvC,KAAKL,MAAM4C,OAAOC,IAC/B,WAA8CC,GAA9C,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,KAAM/C,EAA3B,EAA2BA,MAAOC,EAAlC,EAAkCA,UAAlC,OACE,kBAAC,EAAD,CAAO+C,IAAKJ,EAAOC,KAAMA,EAAMC,YAAaA,EAAaC,KAAMA,EAAM/C,MAAOA,EAC1EC,UAAkB,WAAP8C,EAAiB9C,EAAY,GAAIG,YAAa,EAAKA,gBAG9D6C,EAAS9C,KAAKc,cACpB,OACI,0CAAUd,KAAKL,MAAf,CAAsBoD,SAAU/C,KAAKmB,aAAc6B,IAAK,SAAAC,GAAO,EAAKzB,KAAKyB,KACtEV,EACAO,O,GAnDIzC,aCebV,EAAQ,CACZ+C,KAAM,YACNf,OAAQ,OACRD,OAAQ,WACRa,OAlBa,CAAC,CACdG,KAAM,WACNC,YAAa,WACbC,KAAM,QACN,CACAF,KAAM,WACNC,YAAa,WACbC,KAAM,YACN,CACAA,KAAM,SACN/C,MAAO,SACPC,UAAW,SAUPoD,EAAS,IAAIrB,gBAAgBG,OAAOC,SAASkB,QAEnDC,IAASC,OACP,kBAAC,EAAD,iBAAU1D,EAAV,CAAiBI,MAAOmD,EAAOI,IAAI,YACnCC,SAASC,eAAe,gB","file":"static/js/main.a49bbddf.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass Input extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            value: props.value? props.value : '',\n            className: props.className? props.className : '',\n            error: false\n        }\n    }\n\n    //...\n\n    render () {\n        const {handleError, ...opts} = this.props\n        this.handleError = handleError\n        return (\n          <input {...opts} value={this.state.value}\n            onChange={this.inputChange} className={this.state.className} />\n        )\n    }\n}\n\nInput.propTypes = {\n  name: PropTypes.string,\n  placeholder: PropTypes.string,\n  type: PropTypes.string,\n  className: PropTypes.string,\n  value: PropTypes.string,\n  handleError: PropTypes.func\n}\n\nexport default Input","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Input from './Input'\n\nclass Form extends Component {\n\n    constructor(props) {\n            super(props)\n            if(props.error) {\n                this.state = {\n                  failure: 'wrong username or password!',\n                  errcount: 0\n                }\n            } else {\n                this.state = { errcount: 0 }\n            }\n        }\n\n        handleError = (field, errmsg) => {\n            if(!field) return\n\n            if(errmsg) {\n                this.setState((prevState) => ({\n                    failure: '',\n                    errcount: prevState.errcount + 1,\n                    errmsgs: {...prevState.errmsgs, [field]: errmsg}\n                }))\n            } else {\n                this.setState((prevState) => ({\n                    failure: '',\n                    errcount: prevState.errcount===1? 0 : prevState.errcount-1,\n                    errmsgs: {...prevState.errmsgs, [field]: ''}\n                }))\n            }\n        }\n\n        renderError = () => {\n            if(this.state.errcount || this.state.failure) {\n                const errmsg = this.state.failure\n                  || Object.values(this.state.errmsgs).find(v=>v)\n                return <div className=\"error\">{errmsg}</div>\n            }\n        }\n\n    render() {\n        const inputs = this.props.inputs.map(\n          ({name, placeholder, type, value, className}, index) => (\n            <Input key={index} name={name} placeholder={placeholder} type={type} value={value}\n              className={type==='submit'? className : ''} handleError={this.handleError} />\n          )\n        )\n        const errors = this.renderError()\n        return (\n            <form {...this.props} onSubmit={this.handleSubmit} ref={fm => {this.form=fm}} >\n              {inputs}\n              {errors}\n            </form>\n        )\n    }\n\n    handleSubmit = (event) => {\n            event.preventDefault()\n            if(!this.state.errcount) {\n                const data = new FormData(this.form)\n                fetch(this.form.action, {\n                  method: this.form.method,\n                  body: new URLSearchParams(data)\n                })\n                .then(v => {\n                    if(v.redirected) window.location = v.url\n                })\n                .catch(e => console.warn(e))\n            }\n        }\n}\n\nForm.propTypes = {\n  name: PropTypes.string,\n  action: PropTypes.string,\n  method: PropTypes.string,\n  inputs: PropTypes.array,\n  error: PropTypes.string\n}\n\nexport default Form","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Form from './Form'\n\nconst inputs = [{\n  name: \"username\",\n  placeholder: \"username\",\n  type: \"text\"\n},{\n  name: \"password\",\n  placeholder: \"password\",\n  type: \"password\"\n},{\n  type: \"submit\",\n  value: \"Submit\",\n  className: \"btn\"\n}]\n\nconst props = {\n  name: 'loginForm',\n  method: 'POST',\n  action: '/doLogin',\n  inputs: inputs\n}\n\nconst params = new URLSearchParams(window.location.search)\n\nReactDOM.render(\n  <Form {...props} error={params.get('error')} />,\n  document.getElementById('container'))"],"sourceRoot":""}